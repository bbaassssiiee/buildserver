---

- name: 'create init scripts directory'
  file:
    path: "{{ jenkins_data }}/init.groovy.d"
    state: directory
    owner: jenkins
    group: jenkins
    mode: 0775

- name: 'configure admin user'
  template:
    src: basic-security.groovy.j2
    dest: "{{ jenkins_data }}/init.groovy.d/basic-security.groovy"
    owner: jenkins
    group: jenkins
    mode: 0775
  register: jenkins_users_config

- name: 'start jenkins'
  become: yes
  service:
    name: jenkins
    state: started
    enabled: yes
  tags:
    - jenkins

- name: 'create jenkins CLI destination directory'
  become: yes
  file:
    path: "{{ jenkins_data }}"
    state: directory
  tags:
    - jenkins
    - cli

# if jenkins is installed or updated, wait for pulling the jenkins CLI
- name: 'wait one minute for jenkins to warm up.'
  wait_for:
    port: "{{ jenkins_http }}"
    delay: 60
  retries: 5
  tags:
    - jenkins
    - cli

- name: 'remove Jenkins security init script'
  file:
    path: "{{ jenkins_data }}/init.groovy.d/basic-security.groovy"
    state: absent

# download jenkins command line tools
- name: 'get jenkins CLI'
  become: yes
  environment: '{{ proxy_env }}'
  get_url:
    url: "http://127.0.0.1:{{ jenkins_http }}/jenkins/jnlpJars/jenkins-cli.jar"
    dest: "{{ jenkins_cli }}"
    mode: 0440
    timeout: 300
  retries: 50
  delay: 10
  tags:
    - jenkins
    - plugins
    - cli

# download latest jenkins update file
- name: 'get jenkins updates'
  become: yes
  environment: '{{ proxy_env }}'
  get_url:
    url: http://updates.jenkins-ci.org/update-center.json
    dest: "{{ jenkins_data }}/updates_jenkins.json"
    thirsty: yes
    mode: 0440
    timeout: 300
  retries: 30
  delay: 10
  register: jenkins_updates
  tags:
    - jenkins
    - cli

# jenkins update-center
- name: 'update-center jenkins'
  become: yes
  shell: "cat {{ jenkins_data }}/updates_jenkins.json | sed '1d;$d' \
          | curl -k -X POST -H 'Accept: application/json' \
          -d @- http://127.0.0.1:{{ jenkins_http }}/jenkins/updateCenter/byId/default/postBack"
  when: jenkins_updates.changed
  notify:
    - 'restart jenkins'
  tags:
    - jenkins
    - cli
    - skip_ansible_lint

- name: 'get Jenkins admin password from file'
  when: jenkins_admin_password_file != ""
  slurp:
    src: "{{ jenkins_admin_password_file }}"
  register: adminpasswordfile
  no_log: true
  tags:
    - plugins

- name: 'set admin password'
  set_fact:
    jenkins_password:  "{{ adminpasswordfile['content'] | b64decode }}"
  no_log: false
  tags:
    - plugins

